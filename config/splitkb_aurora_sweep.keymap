/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 9>;
            bindings = <&kp ESC>;
        };

        combo_caps {
            bindings = <&caps_word>;
            key-positions = <10 19>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <3 6>;
        };

        combo_under {
            bindings = <&kp UNDER>;
            key-positions = <13 16>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp Q  &kp W  &kp F      &kp P                     &kp B        &kp J        &kp L      &kp U    &kp Y   &kp SEMI
&kp A  &kp R  &kp S      &kp T                     &kp G        &kp M        &kp N      &kp E    &kp I      &kp O
&kp Z  &kp X  &kp C      &kp D                     &kp V        &kp K        &kp H  &kp COMMA  &kp DOT  &kp SLASH
                     &lt 3 TAB  &mt LEFT_SHIFT BACKSPACE  &lt 2 SPACE  &lt 1 ENTER
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };

        EXTEND {
            bindings = <
     &kp ESC  &kp K_BACK  &kp K_FIND  &kp K_FORWARD        &kp INS  &trans    &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&sk LEFT_ALT    &sk LGUI  &sk LSHIFT      &sk LCTRL  &sk LS(LCTRL)  &trans          &kp LEFT             &kp UP              &kp DOWN              &kp RIGHT
   &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LEFT_GUI      &kp LC(V)  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET         &kp LESS_THAN       &kp GREATER_THAN
                                             &trans         &trans  &trans             &none
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };

        SYM {
            bindings = <
   &trans    &kp AT          &kp HASH         &kp DOLLAR  &trans  &kp EQUAL  &kp N7  &kp N8  &kp N9   &kp PLUS
 &kp BSLH  &kp PIPE          &kp EXCL        &kp PERCENT  &trans  &kp ASTRK  &kp N4  &kp N5  &kp N6  &kp MINUS
&kp CARET  &kp AMPS  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &trans     &kp N0  &kp N1  &kp N2  &kp N3  &kp SLASH
                                                  &trans  &trans      &none  &trans
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };

        FUNCTION {
            bindings = <
  &kp K_STOP  &kp C_REWIND     &kp C_PLAY      &kp C_FF   &kp C_BRI_UP     &kp F12  &kp F7  &kp F8  &kp F9   &kp LC(PLUS)
&sk LEFT_ALT      &sk LGUI      &sk LSHFT     &sk LCTRL   &kp C_BRI_DN     &kp F11  &kp F4  &kp F5  &kp F6  &kp LC(MINUS)
  &kp K_MUTE  &kp K_VOL_DN  &kp LC(LS(C))  &kp K_VOL_UP  &kp LC(LS(V))     &kp F10  &kp F1  &kp F2  &kp F3     &kp LC(N0)
                                                  &none         &trans  &kp KP_NUM  &trans
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };
    };
};
